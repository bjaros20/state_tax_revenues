#Attempt to Get Revenue in R
install.packages("readxl")
install.packages("tidyr")
install.packages("dplyr")
install.packages("did")
install.packages("tidyverse")
install.packages("lmtest")
library(readxl)
library(tidyr)
library(dplyr)
library(did)
library(tidyverse)
library(lmtest)
Census State and Local Data- Tax Foundation
# Census State and Local Data- Tax Foundation
install.packages("readxl")
install.packages("tidyr")
install.packages("dplyr")
install.packages("tidyverse")
install.packages("xlsx")
library(readxl)
library(tidyr)
library(dplyr)
library(tidyverse)
library(xlsx)
#Nebraska or "Direct Switchers DiD Approach"
#Run DiD with all the Direct Switchers (NE, MO, MS, CO, RI, ND, DE)
#Control Group is all States that Did not Switch by 2007.
#this includes: AK, HI, KS, NM, OK.  AL and MT between 2008-now became "Step
#-wise" switchers.  FL and MA had DWS over the whole period 1976-2022.
library(tidyr)
library(dplyr)
library(tidyverse)
# for robust standard error estimation
library(lmtest)
# To calculate correct vcov matrix with 2WFE
library(multiwayvcov)
# For a package way to do FE
library(plm)
#Fixest
install.packages("fixest")
library(fixest)
#Load Data Tables in R
install.packages("data.table")
# Get rate of change for tax bases and find elasticity of tax base w.r.t apportionment and rate changes.
#Redo Callaway and Sant'Anna From Summer
library(readxl)
library(tidyr)
library(dplyr)
library(did)
library(tidyverse)
library(lmtest)
library(caret)
library(ggplot2)
#New Directory
setwd("~/Documents/GitHub/ST_Apportionment/Rates_Of_Change")
#Load Packages
library(readxl)
library(tidyr)
library(dplyr)
library(tidyverse)
#set working directory
setwd("~/Documents/GitHub/state_tax_revenues/fred_excel_files_feb_2024")
#Step 1, you create a vector of state acronyms:
state_acronyms <- c("AK", "AL", "AR", "AZ", "CA", "CO", "CT", "DE", "FL", "GA",
"HI", "IA", "ID", "IL", "IN", "KS", "KY", "LA", "MA", "MD",
"ME", "MI", "MN", "MO", "MS", "MT", "NC", "ND", "NE", "NH",
"NJ", "NM", "NV", "NY", "OH", "OK", "OR", "PA", "RI", "SC",
"SD", "TN", "TX", "UT", "VA", "VT", "WA", "WI", "WV", "WY")
# Step 2, create a loop using list() that reads in the excel files for each state
state_dfs <- list()
#Step 3, create a dataframe for each of those individual excel files
#remember, we want the "Annual" tab, so we put that in for sheet_name
for (state in state_acronyms) {
file_name <- paste(state, ".xls", sep="")
sheet_name <- "Annual"
state_dfs[[state]] <- read_excel(file_name, sheet=sheet_name)
}
#Step 4, access each dataframe by its acronym, because its in the title.
# This is an example, and it just creates a DF for Alaska
AK_df <- state_dfs[["AK"]]
NA_df <- bind_rows(state_dfs,.id="State") %>%
arrange(DATE)
final_df <- data.frame(,colnames(NA_df))
#Step 6, now we need to create a dataframe that stores each state in its own column
counter <- 1
for (st in state_acronyms){
iteration <- NA_df[NA_df$State==st,]
iteration <- iteration[,colSums(is.na(iteration))<nrow(iteration)]
colnames(iteration) <- c("State", "DATE", substring(names(iteration[,3:ncol(iteration)]),3,))
if (counter > 1){
final_df <- iteration
}
else {
final_df <- dplyr::bind_rows(final_df, iteration)
}
}
final_df <- data.frame()
# Initialize counter
counter <- 1
# Loop through each state acronym
for (st in state_acronyms) {
# Subset the data for the current state
iteration <- NA_df[NA_df$State == st, ]
# Remove columns with all NA values
iteration <- iteration[, colSums(is.na(iteration)) < nrow(iteration)]
# Rename the columns
colnames(iteration) <- c("State", "DATE", substring(names(iteration[, 3:ncol(iteration)]), 3))
# Bind the rows to final_df
if (counter == 1) {
final_df <- iteration
} else {
final_df <- dplyr::bind_rows(final_df, iteration)
}
# Increment the counter
counter <- counter + 1
}
# View the final data frame
View(final_df)
counter <- 1
for (st in state_acronyms) {
iteration <- NA_df[NA_df$State == st, ]
iteration <- iteration[, colSums(is.na(iteration)) < nrow(iteration)]
colnames(iteration) <- c("State", "DATE", substring(names(iteration[, 3:ncol(iteration)]), 3))
if (counter == 1) {
final_df <- iteration
} else {
final_df <- dplyr::bind_rows(final_df, iteration)
}
counter <- counter + 1
}
